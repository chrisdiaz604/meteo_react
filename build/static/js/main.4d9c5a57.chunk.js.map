{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","prototype","PropTypes","string","isRequired","Error","mensaje","Formulario","busqueda","guardarBusqueda","guardarConsultar","useState","error","guardarError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","object","App","componente","consultar","guardarResultado","useEffect","a","url","fetch","respuesta","json","cod","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4d9c5a57.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from'prop-types';\n\n\nconst Header = ({titulo}) => {\n    return (  \n           <nav>\n               <div className=\"nav-wrapper light-blue darken-2\">\n                     <a href=\"#!\" className =\"brand-logo\">{titulo}</a>\n               </div>\n           </nav>\n\n    );\n}\n\nHeader.prototype={\n    titulo:PropTypes.string.isRequired\n}\n \nexport default Header;","import React from 'react';\nimport PropTypes from'prop-types';\n\nconst Error = ({mensaje}) => {\n    return (  \n    <p className=\"red darken-4\"> {mensaje}</p>\n    );\n}\nError.prototype={\n    mensaje:PropTypes.string.isRequired\n  }\nexport default Error ;\n\n","import React, {useState} from 'react';\nimport Error from './Error'\nimport PropTypes from 'prop-types';\n\n\nconst Formulario = ({ busqueda, guardarBusqueda,guardarConsultar}) => {\n\n\nconst [error,guardarError]= useState(false);\n  //extrar ciudad y pais\n   const {ciudad,pais}=busqueda;\n\n   // funcion que coloca los elementos en el state\n\n   const handleChange = e =>{\n         //actualizar el state \n\n         guardarBusqueda({\n             ...busqueda,\n              [e.target.name]:e.target.value\n\n         })\n\n   }\n       // Cuando el usuarop da submit al formualroo \n\n       const handleSubmit =e =>{\n           e.preventDefault();\n\n           // validar\n           if(ciudad.trim() ===''|| pais.trim() ==='' ){\n               guardarError(true);\n               return;\n           }\n\n           guardarError(false);\n\n           // pasarlo al componente principal \n           guardarConsultar(true);\n\n       }\n\n    return ( <form\n              onSubmit={handleSubmit}\n              >\n             {error?<Error mensaje=\"Ambos campos son obligatorios\"/>:null}\n           \n              <div className=\" input-field col s12\">\n                <input\n                  type=\"text\"\n                  name=\"ciudad\"\n                  id=\"ciudad\"\n                  value={ciudad}\n                   onChange={handleChange}\n                  />\n                <label htmlFor=\"ciudad\">Ciudad:</label>\n               </div>\n               <div className=\"input-field col s12\">\n                <select\n                 name=\"pais\"\n                 id=\"pais\"\n                 value={pais}\n                 onChange={handleChange}\n                  >\n                  <option value=\"\">---Seleccione un pais--</option>\n                  <option value=\"CA\">Canada</option> \n                  <option value=\"MX\">México</option>\n                  <option value=\"AR\">Argentina</option>\n                  <option value=\"CO\">Colombia</option>\n                  <option value=\"CR\">Costa Rica</option>\n                  <option value=\"ES\">España</option>\n                  <option value=\"PE\">Perú</option>\n                 </select> \n                 <label htmlFor=\"pais\">Pais:</label>\n               </div>\n              <div className=\"input-field col s12\">\n                  <input \n                    type=\"submit\"\n                    value=\"Buscar Clima\"\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4\"\n                  />\n                </div> \n             </form>\n              );\n}\n \nFormulario.propTypes = {\n  busqueda : PropTypes.object.isRequired,\n  guardarBusqueda : PropTypes.func.isRequired,\n  guardarConsultar : PropTypes.func.isRequired,\n}\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from'prop-types';\n\nconst Clima = ({resultado}) => {\n\n    const {name,main} = resultado;\n   \n    if(!name) return null;\n\n    // Grados kelvin \n    const kelvin =273.15;\n\n    return (\n        <div className=\"card-panel white col s12\">\n            <div className=\"black-text\">\n             <h2>El Clima de {name} es:</h2>\n             <p className=\"temperatura\">\n                 {parseFloat(main.temp -kelvin,10 ).toFixed(2)}<span>&#x2103;</span>\n             </p>\n             <p>\n                 Temperatura Maxima\n                 {parseFloat(main.temp_max -kelvin,10 ).toFixed(2)}<span>&#x2103;</span>\n             </p>\n             <p>\n                Temperatura Minima\n                 {parseFloat(main.temp_min -kelvin,10 ).toFixed(2)}<span>&#x2103;</span>\n             </p>\n            </div>\n        </div>\n\n      );\n}\n\nClima.prototype={\n    resultado:PropTypes.object.isRequired\n}\n\nexport default Clima;\n        \n","import React,{Fragment, useState, useEffect} from 'react';\nimport Header from './components/Header';\nimport Formulario from './components/Formulario';\nimport Clima from './components/Clima';\nimport Error from './components/Error';\n\nfunction App() {\n \n  const[busqueda,guardarBusqueda]=useState({ \n    ciudad: '',\n    pais: '' \n});\n\nconst [consultar,guardarConsultar]=useState(false);\nconst[resultado,guardarResultado]=useState({});\nconst[error,guardarError]=useState(false);\nconst {ciudad, pais}=busqueda;\n\nuseEffect(()=>{\nconst consultarAPI= async()=>{\n\n if(consultar){\n\n  const appId = 'e9b9c0cbaa81b0cdccb37141c58d1200';\n  const url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n  const respuesta = await fetch(url);\n  const resultado = await respuesta.json();\n  guardarResultado(resultado);\n  guardarConsultar(false);\n\n  if(resultado.cod === \"404\"){\n    guardarError(true);\n  }else{\n    guardarError(false);\n  }\n\n }\n\n\n}\n consultarAPI();\n // eslint-disable-next-line\n},[consultar]);\n\nlet componente;\nif(error){\n  componente= <Error mensaje=\"No hay  resultados\"/>\n}else{\n componente = <Clima resultado={resultado}/>\n\n}\n\n\n  return (\n  <Fragment>\n  <Header\n    titulo ='Clima React App' \n   />\n   <div className=\"contenedor-form\"> \n    <div className=\"container\">\n     <div className=\"row\">\n        <div className=\"col m6 s12\">\n           <Formulario\n            busqueda ={busqueda}\n            guardarBusqueda= {guardarBusqueda}\n            guardarConsultar={guardarConsultar}\n           />\n        </div>\n        <div className=\"col m6 s12\">\n           {componente}\n        </div>\n      </div>\n     </div>\n   </div>\n  </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}